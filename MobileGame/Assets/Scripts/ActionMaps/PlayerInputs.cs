//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/ActionMaps/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""GenericInputs"",
            ""id"": ""0fe16c24-7996-4c08-b9d0-bae906b2f32b"",
            ""actions"": [
                {
                    ""name"": ""PressTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7a7c6a9-a037-4db7-b958-330bb06db31c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReleaseTouch"",
                    ""type"": ""Button"",
                    ""id"": ""349fd740-5ffa-4315-9d5c-1b25377274ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""289fc2e3-2369-481f-bb0f-b626a3e5e58b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapTouch"",
                    ""type"": ""Button"",
                    ""id"": ""f11ef29d-41b1-4e0a-96d8-ae938c6ad71c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldTouch"",
                    ""type"": ""Button"",
                    ""id"": ""77b1a83e-7f29-45aa-9068-220ac04aaf60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6c56e85-bfd8-45f2-b06a-cc50592873b7"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""ReleaseTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c54f2fb-e9b0-4b5f-8e4e-33bb4aab49cf"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""PressTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e81c5ae-bf3a-401f-85ea-a27af60e96f4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""MoveTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""396e65ac-eae0-4e62-809a-6e8b3791623d"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7de83fb-a4a6-4de3-b46e-b04d2d6f44e9"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": []
        },
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // GenericInputs
        m_GenericInputs = asset.FindActionMap("GenericInputs", throwIfNotFound: true);
        m_GenericInputs_PressTouch = m_GenericInputs.FindAction("PressTouch", throwIfNotFound: true);
        m_GenericInputs_ReleaseTouch = m_GenericInputs.FindAction("ReleaseTouch", throwIfNotFound: true);
        m_GenericInputs_MoveTouch = m_GenericInputs.FindAction("MoveTouch", throwIfNotFound: true);
        m_GenericInputs_TapTouch = m_GenericInputs.FindAction("TapTouch", throwIfNotFound: true);
        m_GenericInputs_HoldTouch = m_GenericInputs.FindAction("HoldTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GenericInputs
    private readonly InputActionMap m_GenericInputs;
    private IGenericInputsActions m_GenericInputsActionsCallbackInterface;
    private readonly InputAction m_GenericInputs_PressTouch;
    private readonly InputAction m_GenericInputs_ReleaseTouch;
    private readonly InputAction m_GenericInputs_MoveTouch;
    private readonly InputAction m_GenericInputs_TapTouch;
    private readonly InputAction m_GenericInputs_HoldTouch;
    public struct GenericInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public GenericInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressTouch => m_Wrapper.m_GenericInputs_PressTouch;
        public InputAction @ReleaseTouch => m_Wrapper.m_GenericInputs_ReleaseTouch;
        public InputAction @MoveTouch => m_Wrapper.m_GenericInputs_MoveTouch;
        public InputAction @TapTouch => m_Wrapper.m_GenericInputs_TapTouch;
        public InputAction @HoldTouch => m_Wrapper.m_GenericInputs_HoldTouch;
        public InputActionMap Get() { return m_Wrapper.m_GenericInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GenericInputsActions set) { return set.Get(); }
        public void SetCallbacks(IGenericInputsActions instance)
        {
            if (m_Wrapper.m_GenericInputsActionsCallbackInterface != null)
            {
                @PressTouch.started -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnPressTouch;
                @PressTouch.performed -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnPressTouch;
                @PressTouch.canceled -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnPressTouch;
                @ReleaseTouch.started -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnReleaseTouch;
                @ReleaseTouch.performed -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnReleaseTouch;
                @ReleaseTouch.canceled -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnReleaseTouch;
                @MoveTouch.started -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnMoveTouch;
                @MoveTouch.performed -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnMoveTouch;
                @MoveTouch.canceled -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnMoveTouch;
                @TapTouch.started -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnTapTouch;
                @TapTouch.performed -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnTapTouch;
                @TapTouch.canceled -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnTapTouch;
                @HoldTouch.started -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.performed -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnHoldTouch;
                @HoldTouch.canceled -= m_Wrapper.m_GenericInputsActionsCallbackInterface.OnHoldTouch;
            }
            m_Wrapper.m_GenericInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PressTouch.started += instance.OnPressTouch;
                @PressTouch.performed += instance.OnPressTouch;
                @PressTouch.canceled += instance.OnPressTouch;
                @ReleaseTouch.started += instance.OnReleaseTouch;
                @ReleaseTouch.performed += instance.OnReleaseTouch;
                @ReleaseTouch.canceled += instance.OnReleaseTouch;
                @MoveTouch.started += instance.OnMoveTouch;
                @MoveTouch.performed += instance.OnMoveTouch;
                @MoveTouch.canceled += instance.OnMoveTouch;
                @TapTouch.started += instance.OnTapTouch;
                @TapTouch.performed += instance.OnTapTouch;
                @TapTouch.canceled += instance.OnTapTouch;
                @HoldTouch.started += instance.OnHoldTouch;
                @HoldTouch.performed += instance.OnHoldTouch;
                @HoldTouch.canceled += instance.OnHoldTouch;
            }
        }
    }
    public GenericInputsActions @GenericInputs => new GenericInputsActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IGenericInputsActions
    {
        void OnPressTouch(InputAction.CallbackContext context);
        void OnReleaseTouch(InputAction.CallbackContext context);
        void OnMoveTouch(InputAction.CallbackContext context);
        void OnTapTouch(InputAction.CallbackContext context);
        void OnHoldTouch(InputAction.CallbackContext context);
    }
}
